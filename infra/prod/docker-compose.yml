version: '3.9'
services:
  db:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: aihub
    volumes:
      - db_data:/var/lib/postgresql/data
      - ../db/init.sql:/docker-entrypoint-initdb.d/00_init.sql:ro
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
    env_file:
      - ../../.env
    environment:
      DATABASE_URL: postgresql+psycopg://postgres:postgres@db:5432/aihub
      USE_PGVECTOR: '1'
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  frontend:
    build:
      context: ../../frontend
      dockerfile: Dockerfile
    command: ["npm","run","build"]
    volumes:
      - build_dist:/app/dist

  nginx:
    image: nginx:alpine
    depends_on:
      - frontend
      - backend
    ports:
      - '80:80'
    volumes:
      - build_dist:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/www/certbot
    entrypoint: /bin/sh -c
    command: >
      "trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --noninteractive --post-hook \"nginx -s reload\"; sleep 12h & wait $${!}; done"

  uptime-kuma:
    image: louislam/uptime-kuma:1
    restart: unless-stopped
    ports:
      - '3001:3001'
    volumes:
      - uptime-data:/app/data

  node-exporter:
    image: prom/node-exporter:latest
    command: ['--path.rootfs=/host']
    ports:
      - '9100:9100'
    volumes:
      - '/:/host:ro,rslave'

  loki:
    image: grafana/loki:2.9.8
    ports:
      - '3100:3100'
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki

  promtail:
    image: grafana/promtail:2.9.8
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail-config.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml

  prometheus:
    image: prom/prometheus:latest
    ports:
      - '9090:9090'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=24h'

  grafana:
    image: grafana/grafana:10.4.9
    depends_on:
      - loki
      - prometheus
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  db_data:
  build_dist:
  certbot-etc:
  certbot-var:
  uptime-data:
  loki-data:
  prom-data:
  grafana-data:
